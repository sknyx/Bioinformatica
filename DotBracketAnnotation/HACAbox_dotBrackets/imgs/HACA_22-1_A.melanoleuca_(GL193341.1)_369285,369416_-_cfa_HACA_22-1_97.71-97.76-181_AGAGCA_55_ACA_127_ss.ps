%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jun 26 08:00:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCAAUGUCUGUUCUUUUCCUCUGCAUUGAAAGGACUAUUUAUCCUUUUAAAUGUAUUCAAAAAGUCAGCACAUUC\
) } def
/len { sequence length } bind def

/coor [
[91.42374420 259.25659180]
[76.07247162 262.23526001]
[62.42322540 254.60424805]
[56.92077255 239.96672058]
[62.16320038 225.23406982]
[75.67519379 217.36260986]
[78.05116272 202.55197144]
[80.42713165 187.74134827]
[82.80310059 172.93070984]
[85.17907715 158.12008667]
[87.26010895 143.26513672]
[89.04537964 128.37176514]
[90.83065033 113.47837830]
[84.13391113 103.74309540]
[85.77323151 92.04118347]
[94.88732147 84.52085114]
[97.26329041 69.71022034]
[99.63925934 54.89958954]
[102.01523590 40.08895874]
[104.39120483 25.27832794]
[92.58869934 15.54959679]
[87.27555847 1.31347024]
[89.78485870 -13.57174969]
[99.34396362 -25.12508392]
[113.30847168 -30.30755424]
[115.68444061 -45.11818314]
[118.06041718 -59.92881393]
[120.43638611 -74.73944092]
[122.81235504 -89.55007172]
[125.18832397 -104.36070251]
[127.26935577 -119.21564484]
[129.05462646 -134.10902405]
[130.83990479 -149.00241089]
[132.62518311 -163.89578247]
[134.41044617 -178.78916931]
[136.19572449 -193.68255615]
[137.98100281 -208.57592773]
[127.15213013 -219.85731506]
[126.15986633 -235.46339417]
[135.47271729 -248.02543640]
[150.69343567 -251.61203003]
[164.63526917 -244.52970886]
[170.71530151 -230.12252808]
[166.06274414 -215.19309998]
[152.87437439 -206.79066467]
[151.08911133 -191.89727783]
[149.30383301 -177.00389099]
[147.51855469 -162.11051941]
[145.73329163 -147.21713257]
[143.94801331 -132.32376099]
[142.16273499 -117.43037415]
[144.55865479 -110.22057343]
[139.99896240 -101.98473358]
[137.62298584 -87.17410278]
[135.24700928 -72.36347198]
[132.87104797 -57.55284500]
[130.49507141 -42.74221420]
[128.11911011 -27.93158340]
[139.76182556 -18.64111710]
[145.22740173 -4.67747307]
[142.95474243 10.24571037]
[133.45520020 22.10553551]
[119.20183563 27.65429878]
[116.82585907 42.46492767]
[114.44989014 57.27555847]
[112.07392120 72.08618927]
[109.69795227 86.89682007]
[116.14399719 102.26161957]
[105.72403717 115.26364899]
[103.93875885 130.15702820]
[102.15348816 145.05041504]
[104.27455139 154.22215271]
[99.98970795 160.49604797]
[97.61373138 175.30668640]
[95.23776245 190.11730957]
[92.86179352 204.92794800]
[90.48582458 219.73857117]
[100.85761261 231.44155884]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 77]
[7 76]
[8 75]
[9 74]
[10 73]
[11 71]
[12 70]
[13 69]
[16 67]
[17 66]
[18 65]
[19 64]
[20 63]
[25 58]
[26 57]
[27 56]
[28 55]
[29 54]
[30 53]
[31 51]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
[37 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
