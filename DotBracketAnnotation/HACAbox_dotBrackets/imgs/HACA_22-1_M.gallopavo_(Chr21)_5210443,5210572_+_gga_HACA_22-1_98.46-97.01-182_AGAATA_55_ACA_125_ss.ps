%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jun 26 08:00:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUAACCUGUGCUUUUCCUCUGCAUUGGAAGGAUUGGCAUUCCUUUUAUAUGUAUUCAGAAGGACAGUACAUUU\
) } def
/len { sequence length } bind def

/coor [
[70.48630524 318.69519043]
[56.36736298 324.40267944]
[41.14785004 323.86755371]
[27.46464348 317.18249512]
[17.68844032 305.50579834]
[13.51302433 290.86044312]
[15.66181469 275.78390503]
[23.76251793 262.88821411]
[36.41164017 254.40766907]
[51.41764450 251.81156921]
[55.05307007 237.25878906]
[58.68849564 222.70599365]
[62.32392120 208.15319824]
[65.95935059 193.60041809]
[69.59477234 179.04762268]
[63.59730148 168.33958435]
[66.71543884 156.05117798]
[77.77653503 149.06517029]
[82.00252533 134.67277527]
[86.22851562 120.28038025]
[90.45450592 105.88798523]
[94.38602448 91.41238403]
[98.02145386 76.85959625]
[101.65688324 62.30680466]
[104.09402466 47.50611877]
[105.31665802 32.55603027]
[106.53929901 17.60593987]
[107.45672607 2.63402247]
[108.06855774 -12.35349464]
[108.68038177 -27.34101105]
[109.29221344 -42.32852936]
[109.90403748 -57.31604385]
[110.51586914 -72.30356598]
[111.12770081 -87.29107666]
[111.73952484 -102.27859497]
[100.05931854 -112.67604065]
[97.84627533 -128.15623474]
[106.14532471 -141.40991211]
[121.03790283 -146.17907715]
[135.49220276 -140.21189880]
[142.68333435 -126.32586670]
[139.21586609 -111.07756805]
[126.72704315 -101.66677094]
[126.11521149 -86.67925262]
[125.50338745 -71.69173431]
[124.89155579 -56.70421600]
[124.27973175 -41.71670151]
[123.66790009 -26.72918320]
[123.05606842 -11.74166584]
[122.44424438 3.24585128]
[125.40177155 10.25346279]
[121.48938751 18.82857895]
[120.26674652 33.77866745]
[119.04411316 48.72875595]
[121.06623840 51.05102158]
[122.14877319 54.42557144]
[121.83905029 58.43911743]
[119.86777496 62.50494385]
[116.20967102 65.94223022]
[112.57424164 80.49501801]
[108.93881989 95.04781342]
[110.20959473 103.25909424]
[104.84689331 110.11397552]
[100.62091064 124.50637054]
[96.39492035 138.89875793]
[92.16893005 153.29115295]
[97.00604248 170.92103577]
[84.14756012 182.68304443]
[80.51213837 197.23583984]
[76.87670898 211.78863525]
[73.24128723 226.34141541]
[69.60585785 240.89421082]
[65.97043610 255.44699097]
[77.99268341 264.79501343]
[85.16764069 278.22781372]
[86.25221252 293.41806030]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 73]
[11 72]
[12 71]
[13 70]
[14 69]
[15 68]
[18 66]
[19 65]
[20 64]
[21 63]
[22 61]
[23 60]
[24 59]
[25 54]
[26 53]
[27 52]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
