%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jun 26 08:00:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCAAUGUCUGAUCUUUCCUCUUCAUUAAAAAGAAUUUAUCCUUCUAAAUGUAUUCAAAGAGCUGGAACCUUUUACAUGU\
) } def
/len { sequence length } bind def

/coor [
[78.86679840 336.63742065]
[63.57967377 338.71286011]
[49.60694122 332.17324829]
[41.40724182 319.10540771]
[41.59707642 303.67922974]
[50.11586761 290.81710815]
[64.24530029 284.62335205]
[66.50766754 269.79495239]
[68.77002716 254.96653748]
[71.03239441 240.13812256]
[62.02986145 228.32754517]
[64.11298370 213.25720215]
[76.56205750 203.89459229]
[78.82441711 189.06617737]
[69.82188416 177.25558472]
[71.90500641 162.18524170]
[84.35408020 152.82264709]
[86.61644745 137.99423218]
[88.87880707 123.16582489]
[91.14117432 108.33741760]
[92.84078979 93.43402100]
[93.97521973 78.47697449]
[95.10964966 63.51993561]
[96.24408722 48.56289673]
[97.37851715 33.60585403]
[96.81089020 18.61660004]
[94.54853058 3.78819060]
[92.28616333 -11.04021835]
[90.02379608 -25.86862755]
[76.39884186 -33.05658340]
[69.69725800 -46.72926331]
[72.30086517 -61.55104446]
[83.00476837 -71.87404633]
[80.74240875 -86.70246124]
[78.48004150 -101.53086853]
[64.63314819 -108.53395081]
[57.57704926 -122.35390472]
[60.02496338 -137.67668152]
[71.03561401 -148.61035156]
[86.37518311 -150.95069885]
[100.14529419 -143.79782104]
[107.05105591 -129.90213013]
[104.43706512 -114.60681915]
[93.30844879 -103.79322815]
[95.57081604 -88.96482086]
[97.83317566 -74.13641357]
[111.12839508 -67.47494507]
[118.03337860 -54.10388565]
[115.71385193 -39.05485916]
[104.85221100 -28.13099098]
[107.11457062 -13.30258274]
[109.37693787 1.52582598]
[111.63930511 16.35423470]
[122.57611084 6.08845663]
[137.57557678 6.21549129]
[148.33694458 16.66503716]
[148.90483093 31.65428162]
[138.96498108 42.88813400]
[124.01813507 44.14974213]
[112.33555603 34.74028778]
[111.20112610 49.69732666]
[110.06669617 64.65436554]
[108.93225861 79.61141205]
[107.79782867 94.56845093]
[110.37584686 99.44985199]
[109.88387299 105.43118286]
[105.96958160 110.59978485]
[103.70722198 125.42819214]
[101.44485474 140.25660706]
[99.18248749 155.08500671]
[108.27326965 167.73393250]
[105.76767731 182.73982239]
[93.65283203 191.32855225]
[91.39046478 206.15695190]
[100.48124695 218.80589294]
[97.97564697 233.81176758]
[85.86080170 242.40049744]
[83.59843445 257.22891235]
[81.33607483 272.05731201]
[79.07370758 286.88571167]
[90.71334076 297.01104736]
[95.00910950 311.82827759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 80]
[8 79]
[9 78]
[10 77]
[13 74]
[14 73]
[17 70]
[18 69]
[19 68]
[20 67]
[21 64]
[22 63]
[23 62]
[24 61]
[25 60]
[26 53]
[27 52]
[28 51]
[29 50]
[33 46]
[34 45]
[35 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
