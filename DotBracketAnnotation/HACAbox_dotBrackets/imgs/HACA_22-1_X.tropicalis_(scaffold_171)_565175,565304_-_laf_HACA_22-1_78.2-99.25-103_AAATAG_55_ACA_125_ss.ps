%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jun 26 08:00:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUAGAUGUCUGUCCUUUUUCCUCUGCGGUAGGAGAUUUUAUUCUCUUGCACGUAUUCAGAAGCACAGUACAUUU\
) } def
/len { sequence length } bind def

/coor [
[88.33326721 275.90316772]
[72.96052551 280.49209595]
[59.87078476 271.21640015]
[59.10537720 255.19161987]
[71.25145721 244.71058655]
[73.68859863 229.90989685]
[76.12574005 215.10920715]
[78.56288147 200.30851746]
[81.00002289 185.50782776]
[83.43716431 170.70715332]
[85.57189178 155.85981750]
[87.40330505 140.97204590]
[89.23471832 126.08426666]
[91.06613159 111.19649506]
[85.78321838 98.25112915]
[94.04608917 86.97209167]
[95.87750244 72.08431244]
[97.70891571 57.19653702]
[99.54033661 42.30876160]
[101.37174988 27.42098427]
[90.94593811 19.95762634]
[84.82006073 8.77731419]
[84.14890289 -3.88020110]
[89.00169373 -15.51040649]
[98.36089325 -23.83959389]
[110.33489227 -27.26932144]
[113.37370300 -41.95828247]
[116.41251373 -56.64724731]
[119.45132446 -71.33621216]
[122.18987274 -86.08409882]
[124.62701416 -100.88478851]
[127.06415558 -115.68547821]
[129.50129700 -130.48616028]
[131.93844604 -145.28684998]
[134.37557983 -160.08753967]
[136.81272888 -174.88822937]
[139.24986267 -189.68891907]
[129.83625793 -202.38377380]
[132.23905945 -218.00433350]
[145.03274536 -227.28320312]
[160.62702942 -224.71537781]
[169.77011108 -211.82432556]
[167.03756714 -196.25805664]
[154.05055237 -187.25177002]
[151.61341858 -172.45108032]
[149.17626953 -157.65039062]
[146.73913574 -142.84970093]
[144.30198669 -128.04902649]
[141.86485291 -113.24833679]
[139.42770386 -98.44764709]
[136.99055481 -83.64695740]
[139.07037354 -76.33068085]
[134.14028931 -68.29739380]
[131.10147095 -53.60843277]
[128.06266785 -38.91947174]
[125.02384949 -24.23050880]
[137.43942261 -11.99658012]
[140.26094055 5.35943651]
[132.22076416 21.16993713]
[116.25952911 29.25239754]
[114.42810822 44.14017487]
[112.59669495 59.02795410]
[110.76528168 73.91573334]
[108.93386841 88.80350494]
[114.21678162 101.74887085]
[105.95391083 113.02790833]
[104.12249756 127.91568756]
[102.29108429 142.80346680]
[100.45966339 157.69123840]
[102.55371094 166.88114929]
[98.23785400 173.14428711]
[95.80071259 187.94497681]
[93.36357117 202.74566650]
[90.92642975 217.54635620]
[88.48928833 232.34703064]
[86.05214691 247.14772034]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[5 76]
[6 75]
[7 74]
[8 73]
[9 72]
[10 71]
[11 69]
[12 68]
[13 67]
[14 66]
[16 64]
[17 63]
[18 62]
[19 61]
[20 60]
[26 56]
[27 55]
[28 54]
[29 53]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
