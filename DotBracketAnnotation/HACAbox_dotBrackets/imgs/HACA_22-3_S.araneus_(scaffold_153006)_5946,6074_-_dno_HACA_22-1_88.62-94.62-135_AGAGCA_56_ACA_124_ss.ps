%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jun 26 08:00:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCAAUAUCUGUUCUUUACCUCUGCAUUGAAAGGAGUAUCCUUUUAAGUGUAUUCAGAAAGUCAGCACAUUA\
) } def
/len { sequence length } bind def

/coor [
[57.71463394 155.98548889]
[47.44643021 166.92001343]
[37.17822266 177.85455322]
[26.91001511 188.78907776]
[16.64180946 199.72360229]
[6.37360287 210.65814209]
[5.43833780 226.67390442]
[-7.74901056 235.81028748]
[-23.07223701 231.05862427]
[-28.77667427 216.06399536]
[-20.48636627 202.32897949]
[-4.56092691 200.38992310]
[5.70727968 189.45539856]
[15.97548676 178.52087402]
[26.24369240 167.58633423]
[36.51189804 156.65180969]
[46.78010559 145.71728516]
[35.85473251 128.42202759]
[30.38279343 108.71042633]
[30.82949257 88.25828552]
[37.15685272 68.80438995]
[48.82694626 52.00265121]
[64.84761047 39.28149796]
[83.85682678 31.72244263]
[104.23847961 29.96813393]
[106.74001312 15.17819405]
[109.24154663 0.38825318]
[111.74307251 -14.40168762]
[114.24460602 -29.19162750]
[116.74613953 -43.98156738]
[118.93738556 -58.82065201]
[120.81738281 -73.70237732]
[122.69738007 -88.58409119]
[124.57737732 -103.46581268]
[126.45737457 -118.34753418]
[128.33737183 -133.22926331]
[130.21737671 -148.11097717]
[126.20388031 -164.58302307]
[140.92114258 -172.99957275]
[153.08293152 -161.18740845]
[145.09909058 -146.23097229]
[143.21910095 -131.34925842]
[141.33909607 -116.46753693]
[139.45910645 -101.58581543]
[137.57910156 -86.70409393]
[135.69909668 -71.82237244]
[133.81910706 -56.94065475]
[136.17507935 -49.69895554]
[131.53607178 -41.48003769]
[129.03454590 -26.69009590]
[126.53301239 -11.90015602]
[124.03148651 2.88978434]
[121.52995300 17.67972565]
[119.02841949 32.46966553]
[129.52630615 36.35548401]
[139.27256775 41.86143494]
[148.01910400 48.84735870]
[155.54327393 57.13542557]
[161.65353394 66.51464844]
[166.19433594 76.74626923]
[169.05010986 87.56983948]
[170.14814758 98.70983124]
[169.46049500 109.88266754]
[167.00465393 120.80393219]
[162.84313965 131.19560242]
[157.08190918 140.79316711]
[149.86759949 149.35231018]
[141.38385010 156.65513611]
[131.84664917 162.51574707]
[121.49874878 166.78495789]
[110.60358429 169.35409546]
[99.43849945 170.15776062]
[88.28769684 169.17549133]
[77.43505096 166.43229675]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 17]
[2 16]
[3 15]
[4 14]
[5 13]
[6 12]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
[37 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
