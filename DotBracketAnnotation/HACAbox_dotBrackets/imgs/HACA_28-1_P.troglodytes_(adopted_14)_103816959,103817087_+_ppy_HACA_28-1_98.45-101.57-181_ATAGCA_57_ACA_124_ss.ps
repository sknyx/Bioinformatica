%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jun 26 08:00:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCAAGAAAGUCUAACCUAUUCCGGUGUUCUCUCUCCCAUGAGACAAGCCGUUAUAUAGACUUAAACAGUG\
) } def
/len { sequence length } bind def

/coor [
[74.84214783 347.73968506]
[60.66667557 342.45657349]
[48.81883621 333.04998779]
[40.45935059 320.44149780]
[36.40720367 305.86633301]
[37.05937958 290.75244141]
[42.35198593 276.58050537]
[51.76651001 264.73898315]
[64.38060760 256.38793945]
[78.95847321 252.34556580]
[79.59509277 237.35908508]
[80.23171234 222.37260437]
[80.86833191 207.38610840]
[81.50495148 192.39962769]
[82.14156342 177.41314697]
[82.77818298 162.42666626]
[80.38655090 159.45153809]
[79.49674225 155.06584167]
[80.80477142 150.08184814]
[84.56946564 145.61267090]
[87.10447693 130.82843018]
[89.63948822 116.04418945]
[81.35865784 104.15411377]
[83.80739594 89.87300873]
[95.57627106 81.42079163]
[98.11128235 66.63655853]
[100.64629364 51.85231781]
[103.18130493 37.06807709]
[92.83929443 23.14030838]
[95.56755066 6.34655571]
[109.23979950 -3.20852041]
[111.14506531 -18.08702660]
[113.05033112 -32.96553421]
[114.95560455 -47.84403992]
[103.57026672 -58.38698959]
[100.58936310 -73.61505127]
[107.15911102 -87.67272186]
[120.75330353 -95.15454102]
[136.14469910 -93.18359375]
[147.41497803 -82.51775360]
[150.23051453 -67.25825500]
[143.50866699 -53.27267838]
[129.83410645 -45.93877411]
[127.92884064 -31.06026649]
[126.02357483 -16.18175888]
[124.11830902 -1.30325317]
[133.44235229 7.84018755]
[135.73869324 20.89531136]
[129.92468262 33.02597427]
[117.96554565 39.60309219]
[115.43053436 54.38732910]
[112.89552307 69.17156982]
[110.36051178 83.95581055]
[118.64134216 95.84588623]
[116.19260406 110.12699127]
[104.42372894 118.57920837]
[101.88871765 133.36344910]
[99.35370636 148.14768982]
[97.76467133 163.06327820]
[97.12805176 178.04975891]
[96.49143219 193.03623962]
[95.85481262 208.02273560]
[95.21820068 223.00921631]
[94.58158112 237.99569702]
[93.94496155 252.98217773]
[108.12749481 258.24627686]
[119.98793793 267.63699341]
[128.36430359 280.23428345]
[132.43598938 294.80398560]
[131.80406189 309.91873169]
[126.53045654 324.09774780]
[117.13181305 335.95190430]
[104.52891541 344.31982422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 65]
[11 64]
[12 63]
[13 62]
[14 61]
[15 60]
[16 59]
[20 58]
[21 57]
[22 56]
[25 53]
[26 52]
[27 51]
[28 50]
[31 46]
[32 45]
[33 44]
[34 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
