%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jun 26 08:00:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGCAAAAAAGUCUAGCCUCCUCUGGUGUUCUCUCUGUGAGACAAGCCAUUACGCAGACUUAAACAGUG\
) } def
/len { sequence length } bind def

/coor [
[79.72987366 332.11593628]
[65.56390381 326.80740356]
[53.73295212 317.37957764]
[45.39609909 304.75610352]
[41.37010574 290.17370605]
[42.04939270 275.06100464]
[47.36741257 260.89859009]
[56.80316162 249.07395935]
[69.43222046 240.74557495]
[84.01731873 236.72935486]
[84.68081665 221.74403381]
[85.34431458 206.75871277]
[86.00782013 191.77339172]
[86.67131805 176.78807068]
[87.33481598 161.80274963]
[84.38953400 154.75852966]
[88.37368011 146.17358398]
[89.69937897 131.23228455]
[78.45661163 124.84835052]
[70.54336548 114.62411499]
[67.18263245 102.13973236]
[68.89381409 89.32464600]
[75.41244507 78.15943909]
[85.73107147 70.36968231]
[98.25495911 67.15927887]
[100.89598083 52.39361191]
[103.53701019 37.62794113]
[106.17803955 22.86227417]
[95.93753815 8.87162018]
[98.76991272 -7.89539528]
[112.48917389 -17.36684227]
[114.47447968 -32.23487854]
[116.45978546 -47.10291672]
[118.44509888 -61.97095490]
[109.88375092 -75.53867340]
[115.28938293 -90.64359283]
[130.51525879 -95.69851685]
[143.88137817 -86.82574463]
[145.13441467 -70.83169556]
[133.31314087 -59.98564911]
[131.32781982 -45.11761093]
[129.34251404 -30.24957275]
[127.35720825 -15.38153458]
[136.63795471 -6.17817068]
[138.85700989 6.90184259]
[132.95883179 19.00458717]
[120.94371033 25.50330162]
[118.30268097 40.26897049]
[115.66165161 55.03463745]
[113.02062225 69.80030823]
[126.27728271 80.22470093]
[132.62405396 95.84922028]
[130.39199829 112.56522369]
[120.16803741 125.97707367]
[104.64067841 132.55798340]
[103.31497955 147.49928284]
[102.32013702 162.46626282]
[101.65663910 177.45156860]
[100.99313354 192.43688965]
[100.32963562 207.42221069]
[99.66613770 222.40753174]
[99.00263214 237.39285278]
[113.17570496 242.68238831]
[125.01927948 252.09434509]
[133.37304688 264.70663452]
[137.41857910 279.28363037]
[136.75953674 294.39721680]
[131.46051025 308.56674194]
[122.04061127 320.40402222]
[109.42272949 328.74932861]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[15 57]
[17 56]
[18 55]
[25 50]
[26 49]
[27 48]
[28 47]
[31 43]
[32 42]
[33 41]
[34 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
