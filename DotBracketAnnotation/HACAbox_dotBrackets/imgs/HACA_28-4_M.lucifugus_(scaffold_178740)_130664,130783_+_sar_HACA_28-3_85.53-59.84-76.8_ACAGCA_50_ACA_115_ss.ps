%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jun 26 08:00:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGCAACAAAGUCUAACCUAUUCCAGUGCUCUCCUCUAUGAGACAAGCCGUUAUAUAGACUUAGACAGUG\
) } def
/len { sequence length } bind def

/coor [
[60.00543976 351.25830078]
[46.00331879 357.06488037]
[30.85952377 357.72918701]
[16.40274239 353.17098999]
[4.37869787 343.94070435]
[-3.76064539 331.15292358]
[-7.03242302 316.35186768]
[-5.04155159 301.32482910]
[1.97156119 287.88638306]
[13.16004753 277.65927124]
[27.17284393 271.87850952]
[42.31783676 271.24212646]
[46.82842636 256.93637085]
[51.33901215 242.63059998]
[55.84959793 228.32484436]
[60.36018372 214.01908875]
[64.87077332 199.71334839]
[60.05023575 182.98097229]
[73.35456085 170.46435547]
[77.23684692 155.97547913]
[81.11913300 141.48658752]
[85.00141907 126.99769592]
[73.54580688 115.93765259]
[69.12245941 100.64093018]
[72.90723419 85.17382812]
[83.89402771 73.64794159]
[99.16224670 69.12717438]
[97.95574951 59.74700165]
[102.88308716 53.92135239]
[106.76537323 39.43246460]
[109.69172668 24.72068596]
[111.64962006 9.84901428]
[113.60751343 -5.02265930]
[115.56540680 -19.89433289]
[105.74673462 -32.27856445]
[107.64382935 -47.96857834]
[120.13117981 -57.65576935]
[135.80026245 -55.59289551]
[145.35488892 -43.00382614]
[143.12646484 -27.35742950]
[130.43707275 -17.93643951]
[128.47918701 -3.06476617]
[126.52129364 11.80690670]
[124.56340027 26.67857933]
[126.69542694 29.86041641]
[127.19529724 34.32526398]
[125.43447113 39.19197083]
[121.25425720 43.31475067]
[117.37197113 57.80363846]
[113.80668640 72.37377167]
[124.43176270 81.10762024]
[130.21131897 93.58837128]
[129.99911499 107.34073639]
[123.83721161 119.63722229]
[112.94770813 128.03907776]
[99.49030304 130.87998962]
[95.60801697 145.36886597]
[91.72573090 159.85775757]
[87.84344482 174.34664917]
[93.65737152 186.08869934]
[89.90193176 198.21812439]
[79.17652893 204.22392273]
[74.66593933 218.52967834]
[70.15534973 232.83543396]
[65.64476776 247.14118958]
[61.13417816 261.44696045]
[56.62359238 275.75268555]
[68.66462708 284.96081543]
[76.82752228 297.73355103]
[80.12657166 312.52856445]
[78.16339111 327.55923462]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 67]
[13 66]
[14 65]
[15 64]
[16 63]
[17 62]
[19 59]
[20 58]
[21 57]
[22 56]
[27 50]
[29 49]
[30 48]
[31 44]
[32 43]
[33 42]
[34 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
