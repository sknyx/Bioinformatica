%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jun 26 08:00:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUAAACCAACCCCAUAUAUACCUCAGCCCAGGCCCUGUGCCUGGUCUGUAUUGUGAAUCAGGAGACAAGG\
) } def
/len { sequence length } bind def

/coor [
[83.11432648 286.97274780]
[68.02619171 286.47183228]
[53.63306427 281.91766357]
[41.00299835 273.64819336]
[31.07323647 262.27706909]
[24.58062744 248.64811707]
[22.00696754 233.77267456]
[23.54324150 218.75460815]
[29.07544518 204.70834351]
[38.19305038 192.67622375]
[50.21947861 183.55111694]
[64.26227570 178.01014709]
[79.27938843 176.46450806]
[81.81439972 161.68026733]
[73.03086090 149.70591736]
[75.39111328 134.67649841]
[88.01046753 125.54469299]
[90.54547882 110.76045990]
[85.88209534 97.57923889]
[94.67028046 86.70452881]
[97.20529175 71.92029572]
[99.74030304 57.13605499]
[102.27532196 42.35181427]
[91.61665344 31.22980690]
[89.57461548 16.14062309]
[96.72462463 2.89896870]
[110.14024353 -3.51656938]
[112.67525482 -18.30080795]
[115.21026611 -33.08504486]
[109.91650391 -47.99432755]
[119.69342804 -59.23091888]
[122.22843933 -74.01515961]
[124.76345062 -88.79939270]
[127.29846191 -103.58363342]
[129.83348083 -118.36787415]
[132.36848450 -133.15211487]
[124.31589508 -147.02781677]
[130.27766418 -161.92201233]
[145.68043518 -166.40913391]
[158.70851135 -157.04705811]
[159.36788940 -141.01754761]
[147.15272522 -130.61709595]
[144.61772156 -115.83286285]
[142.08270264 -101.04862213]
[139.54768372 -86.26438141]
[137.01268005 -71.48014069]
[134.47766113 -56.69590378]
[139.95275879 -42.84409332]
[129.99450684 -30.55003357]
[127.45949554 -15.76579571]
[124.92448425 -0.98155701]
[135.43649292 9.53678608]
[137.76675415 24.40399551]
[130.81455994 37.95096207]
[117.05955505 44.88682556]
[114.52454376 59.67106628]
[111.98953247 74.45530701]
[109.45452118 89.23954010]
[114.11790466 102.42076111]
[105.32971954 113.29547119]
[102.79470825 128.07971191]
[111.65104675 140.89387512]
[108.86957550 155.85108948]
[96.59864044 164.21528625]
[94.06362915 178.99952698]
[107.70800781 185.45967102]
[119.10272980 195.36233521]
[127.40223694 207.97268677]
[131.99064636 222.35493469]
[132.52746582 237.44181824]
[128.97286987 252.11381531]
[121.59062195 265.28216553]
[110.92853546 275.96963501]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 65]
[14 64]
[17 61]
[18 60]
[20 58]
[21 57]
[22 56]
[23 55]
[27 51]
[28 50]
[29 49]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
