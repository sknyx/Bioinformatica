%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jun 26 08:00:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUAAAUCUAUUCCAAAAACCAGGUCCUCUGACUGGUCAGUGUCAUGAAUAGAGAGACAUAG\
) } def
/len { sequence length } bind def

/coor [
[87.35826874 292.98849487]
[74.70639801 284.69479370]
[65.23823547 272.89611816]
[59.88137436 258.74835205]
[59.16061401 243.63755798]
[63.14657593 229.04415894]
[71.44875336 216.39785767]
[83.25379181 206.93760681]
[97.40513611 201.59022522]
[96.68043518 186.60774231]
[95.95573425 171.62525940]
[95.23103333 156.64277649]
[94.50633240 141.66029358]
[93.78163147 126.67780304]
[93.05693054 111.69532013]
[90.88959503 96.85272980]
[87.29986572 82.28859711]
[73.08246613 76.35800934]
[65.17575836 63.34503937]
[66.43278503 48.34891129]
[76.16264343 37.10311508]
[72.57290649 22.53898811]
[68.98316956 7.97486115]
[65.39343262 -6.58926630]
[61.80369949 -21.15339279]
[47.17350006 -26.04836845]
[37.53004074 -38.09026337]
[35.95051956 -53.43655777]
[42.93894958 -67.19029999]
[56.26535034 -74.96271515]
[71.67732239 -74.27366638]
[84.25695038 -65.34302521]
[89.99012756 -51.02051544]
[87.04741669 -35.87640762]
[76.36782837 -24.74312782]
[79.95756531 -10.17900085]
[83.54729462 4.38512611]
[87.13703156 18.94925308]
[90.72676849 33.51338196]
[104.56830597 38.94934845]
[112.65039825 51.64359283]
[111.69677734 66.84043121]
[101.86399078 78.69886780]
[105.45372772 93.26299286]
[108.35639954 95.16487122]
[110.50714874 98.31715393]
[111.37966156 102.38887024]
[110.60192871 106.83525085]
[108.03941345 110.97061920]
[108.76411438 125.95310211]
[109.48881531 140.93559265]
[110.21351624 155.91807556]
[110.93821716 170.90055847]
[111.66291809 185.88304138]
[112.38761902 200.86552429]
[126.98899841 204.82214355]
[139.65197754 213.09887695]
[149.13594055 224.88487244]
[154.51174927 239.02543640]
[155.25276184 254.13523865]
[151.28636169 268.73397827]
[143.00114441 281.39138794]
[131.20880127 290.86746216]
[117.06462860 296.23379517]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 55]
[10 54]
[11 53]
[12 52]
[13 51]
[14 50]
[15 49]
[16 44]
[17 43]
[21 39]
[22 38]
[23 37]
[24 36]
[25 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
