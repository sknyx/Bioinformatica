%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jun 26 08:00:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGUAUGAGCAGAGGAAAUCCAGACAGGUUGUUUUCCAUUUGUCUUGGGGCCUGUCUCUACAGCUCUGCCACAUUU\
) } def
/len { sequence length } bind def

/coor [
[87.53604889 206.33926392]
[80.15560913 191.69477844]
[89.37294006 178.13111877]
[89.97692871 163.14328003]
[90.58091736 148.15544128]
[83.36236572 135.12695312]
[91.64907074 121.64952087]
[92.25305939 106.66168213]
[89.34233856 98.88455200]
[93.19521332 91.08603668]
[94.40220642 76.13468170]
[95.60920715 61.18331909]
[96.81620789 46.23196030]
[98.02320099 31.28060150]
[99.23020172 16.32924271]
[86.24883270 10.13198185]
[76.21656036 -0.13495868]
[70.34574127 -13.20118904]
[69.33560181 -27.45989418]
[73.28902435 -41.16542053]
[81.70246887 -52.64700317]
[93.53005219 -60.51241684]
[107.31347656 -63.81680298]
[109.12152863 -78.70743561]
[110.92957306 -93.59806824]
[112.73762512 -108.48870087]
[114.54567719 -123.37933350]
[116.35372925 -138.26997375]
[118.16177368 -153.16059875]
[119.96982574 -168.05123901]
[117.89373016 -172.02105713]
[117.21249390 -176.05293274]
[117.78100586 -179.71272278]
[119.33117676 -182.65513611]
[121.51058197 -184.65547180]
[123.92813873 -185.62666321]
[128.67816162 -199.85470581]
[133.42817688 -214.08276367]
[138.17820740 -228.31080627]
[129.84498596 -241.54301453]
[132.01806641 -257.02886963]
[143.67140198 -267.45642090]
[159.30264282 -267.90209961]
[171.53117371 -258.15545654]
[174.58308411 -242.81858826]
[167.01733398 -229.13305664]
[152.40625000 -223.56079102]
[147.65623474 -209.33273315]
[142.90620422 -195.10469055]
[138.15618896 -180.87664795]
[134.86045837 -166.24317932]
[133.05241394 -151.35255432]
[131.24435425 -136.46191406]
[129.43630981 -121.57128906]
[127.62825775 -106.68065643]
[125.82020569 -91.79002380]
[124.01216125 -76.89938354]
[122.20410919 -62.00875473]
[136.02719116 -54.52608109]
[145.98828125 -42.31764221]
[150.56683350 -27.20109749]
[149.04650879 -11.44137859]
[141.62705994 2.58864450]
[129.39859009 12.76544762]
[114.18156433 17.53623962]
[112.97456360 32.48759842]
[111.76756287 47.43896103]
[110.56056976 62.39031982]
[109.35356903 77.34168243]
[108.14656830 92.29303741]
[107.24089050 107.26567078]
[106.63690186 122.25350952]
[113.81224823 136.35403442]
[105.56874847 148.75942993]
[104.96475983 163.74726868]
[104.36077118 178.73510742]
[112.45679474 192.99647522]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[3 76]
[4 75]
[5 74]
[7 72]
[8 71]
[10 70]
[11 69]
[12 68]
[13 67]
[14 66]
[15 65]
[23 58]
[24 57]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[30 51]
[36 50]
[37 49]
[38 48]
[39 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
