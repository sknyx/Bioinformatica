%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jun 26 08:00:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUAUGAGCAGAGGAUAUCCAGACGGGUUGUUUUCCAUUUGUCUUGGGACCUGUCUCUACAACUCUGCCACAUUU\
) } def
/len { sequence length } bind def

/coor [
[78.92015076 311.12661743]
[65.45040131 303.94827271]
[56.43607330 291.63140869]
[53.66696930 276.62158203]
[57.69289398 261.89898682]
[67.71449280 250.38682556]
[81.74198151 244.37080383]
[82.34597015 229.38298035]
[79.38660431 222.38090515]
[83.28812408 213.80732727]
[84.49512482 198.85597229]
[85.70211792 183.90461731]
[86.90911865 168.95324707]
[88.11611938 154.00189209]
[89.32311249 139.05053711]
[76.54212952 132.99497986]
[66.62404633 122.91256714]
[60.77930832 110.03381348]
[59.72123337 95.93048859]
[63.57895279 82.32382202]
[71.88165283 70.87443542]
[83.61604309 62.97965622]
[97.34999847 59.60300064]
[99.15805054 44.71236801]
[100.96610260 29.82173538]
[102.77414703 14.93110275]
[104.58219910 0.04046931]
[106.39025116 -14.85016346]
[108.19830322 -29.74079704]
[110.00634766 -44.63143158]
[111.81439972 -59.52206421]
[109.73829651 -63.49187851]
[109.05706787 -67.52375793]
[109.62557220 -71.18354797]
[111.17575073 -74.12596893]
[113.35514832 -76.12629700]
[115.77271271 -77.09749603]
[120.52273560 -91.32553864]
[125.27275848 -105.55358887]
[116.93953705 -118.78579712]
[119.11262512 -134.27165222]
[130.76596069 -144.69920349]
[146.39718628 -145.14488220]
[158.62573242 -135.39823914]
[161.67762756 -120.06136322]
[154.11187744 -106.37584686]
[139.50080872 -100.80356598]
[134.75077820 -86.57552338]
[130.00076294 -72.34747314]
[126.70503235 -57.71401215]
[124.89698029 -42.82337952]
[123.08893585 -27.93274689]
[121.28088379 -13.04211330]
[119.47283173 1.84851956]
[117.66477966 16.73915291]
[115.85673523 31.62978554]
[114.04868317 46.52042007]
[112.24063110 61.41105270]
[125.98653412 68.95744324]
[135.83355713 81.16130066]
[140.30429077 96.19161224]
[138.72799683 111.79331970]
[131.34115601 125.62561035]
[119.25205231 135.61317444]
[104.27447510 140.25753784]
[103.06747437 155.20889282]
[101.86048126 170.16024780]
[100.65348053 185.11160278]
[99.44647980 200.06297302]
[98.23947906 215.01432800]
[97.33380890 229.98696899]
[96.72981262 244.97479248]
[110.22772980 252.10005188]
[119.29048920 264.38128662]
[122.11868286 279.38009644]
[118.15076447 294.11843872]
[108.17457581 305.66998291]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 72]
[8 71]
[10 70]
[11 69]
[12 68]
[13 67]
[14 66]
[15 65]
[23 58]
[24 57]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[30 51]
[31 50]
[37 49]
[38 48]
[39 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
