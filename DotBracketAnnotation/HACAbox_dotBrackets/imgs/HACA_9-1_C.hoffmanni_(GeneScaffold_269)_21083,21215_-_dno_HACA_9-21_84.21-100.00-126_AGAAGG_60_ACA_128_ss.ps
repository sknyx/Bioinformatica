%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jun 26 08:00:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAGGUUCUGAAAUGGUUUGAGGCCUUGUCCUCUCUUUUCUUCAGAGCAGGGCCAUAGACAUUUCAGACAGUU\
) } def
/len { sequence length } bind def

/coor [
[75.13039398 363.70462036]
[60.55239868 359.29986572]
[49.03054810 349.34161377]
[42.56108093 335.55517578]
[42.26486969 320.32913208]
[48.19323349 306.30151367]
[59.31904984 295.90264893]
[73.71469879 290.93423462]
[74.96986389 275.98684692]
[76.22503662 261.03945923]
[77.48020172 246.09205627]
[78.73536682 231.14466858]
[79.99053955 216.19726562]
[81.24570465 201.24987793]
[82.50086975 186.30249023]
[83.75604248 171.35508728]
[81.09887695 164.21839905]
[85.38964081 155.81243896]
[87.26963806 140.93070984]
[89.14963531 126.04899597]
[91.02963257 111.16727448]
[85.78900146 98.20473480]
[94.08864594 86.95272827]
[95.96864319 72.07100677]
[97.84864044 57.18928909]
[99.72863770 42.30756760]
[101.60863495 27.42584801]
[103.48863983 12.54412746]
[105.36863708 -2.33759356]
[102.99887085 -9.02682400]
[104.38143921 -14.92839432]
[108.07967377 -18.36621094]
[111.19834900 -33.03842545]
[114.31702423 -47.71063995]
[117.43569946 -62.38285446]
[106.40298462 -73.16629791]
[102.97392273 -88.20774841]
[108.24270630 -102.70751953]
[120.52809906 -112.03879547]
[135.90986633 -113.22399139]
[149.47975159 -105.88492584]
[156.90763855 -92.36346436]
[155.82333374 -76.97425842]
[146.57283020 -64.62793732]
[132.10791016 -59.26417923]
[128.98924255 -44.59196472]
[125.87055969 -29.91975021]
[122.75188446 -15.24753571]
[120.25035858 -0.45759499]
[118.37035370 14.42412567]
[116.49035645 29.30584526]
[114.61035919 44.18756485]
[112.73036194 59.06928635]
[110.85036469 73.95100403]
[108.97036743 88.83272552]
[114.21099854 101.79526520]
[105.91135406 113.04727173]
[104.03135681 127.92899323]
[102.15135956 142.81071472]
[100.27136230 157.69242859]
[98.70343018 172.61026001]
[97.44826508 187.55764771]
[96.19309998 202.50505066]
[94.93792725 217.45243835]
[93.68276215 232.39982605]
[92.42759705 247.34722900]
[91.17242432 262.29461670]
[89.91725922 277.24200439]
[88.66209412 292.18939209]
[102.02757263 299.48898315]
[111.26338196 311.59765625]
[114.76934814 326.41751099]
[111.93806458 341.38092041]
[103.26004791 353.89538574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 69]
[9 68]
[10 67]
[11 66]
[12 65]
[13 64]
[14 63]
[15 62]
[16 61]
[18 60]
[19 59]
[20 58]
[21 57]
[23 55]
[24 54]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[32 48]
[33 47]
[34 46]
[35 45]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
