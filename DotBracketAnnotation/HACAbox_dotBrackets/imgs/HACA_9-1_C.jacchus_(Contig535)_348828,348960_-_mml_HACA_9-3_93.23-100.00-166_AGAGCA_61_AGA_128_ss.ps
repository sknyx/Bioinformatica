%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jun 26 08:00:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGCAGUUUUGAAAUGCUUUGAGGCCUUGCCCUGUUCUAUCCAGAGCAAGGAUAUAGAAAUUUCAGAGAAUU\
) } def
/len { sequence length } bind def

/coor [
[67.81069946 383.39587402]
[52.67120743 381.45718384]
[39.87684250 373.13449097]
[31.96793175 360.08032227]
[30.51479912 344.88653564]
[35.80596542 330.56988525]
[46.79085922 319.97296143]
[61.28843307 315.19979858]
[63.19369888 300.32128906]
[65.09896851 285.44277954]
[67.00423431 270.56427002]
[68.90950012 255.68576050]
[70.81476593 240.80725098]
[72.72003937 225.92874146]
[74.62530518 211.05023193]
[76.53057098 196.17173767]
[69.31579590 186.22917175]
[70.98499298 173.65011597]
[81.17251587 165.42375183]
[83.70752716 150.63951111]
[86.24253845 135.85527039]
[88.77755737 121.07102966]
[78.56396484 110.50847626]
[76.47015381 95.96540070]
[83.28923798 82.95059967]
[96.43820953 76.39395905]
[98.97322083 61.60971832]
[101.50823212 46.82547760]
[104.04324341 32.04124069]
[106.57825470 17.25700188]
[109.11326599 2.47276306]
[103.81950378 -12.43651676]
[113.59642792 -23.67310715]
[116.13143921 -38.45734787]
[118.66645050 -53.24158478]
[108.42103577 -65.05536652]
[108.21804047 -80.69163513]
[118.15331268 -92.76741791]
[133.53570557 -95.58089447]
[147.10215759 -87.80363464]
[152.44697571 -73.10782623]
[147.04650879 -58.43236923]
[133.45069885 -50.70657349]
[130.91567993 -35.92233276]
[128.38066101 -21.13809586]
[133.85575867 -7.28628397]
[123.89750671 5.00777531]
[121.36249542 19.79201317]
[118.82748413 34.57625198]
[116.29247284 49.36049271]
[113.75746155 64.14472961]
[111.22244263 78.92897034]
[121.43603516 89.49152374]
[123.52984619 104.03459930]
[116.71076202 117.04940033]
[103.56179047 123.60604095]
[101.02677917 138.39028931]
[98.49176788 153.17451477]
[95.95675659 167.95875549]
[102.80204010 184.90093994]
[91.40908051 198.07699585]
[89.50380707 212.95550537]
[87.59854126 227.83401489]
[85.69327545 242.71252441]
[83.78800964 257.59103394]
[81.88274384 272.46954346]
[79.97747040 287.34805298]
[78.07220459 302.22653198]
[76.16693878 317.10504150]
[88.99398041 325.37728882]
[96.95423889 338.40023804]
[98.46718597 353.58816528]
[93.23244476 367.92553711]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 69]
[9 68]
[10 67]
[11 66]
[12 65]
[13 64]
[14 63]
[15 62]
[16 61]
[19 59]
[20 58]
[21 57]
[22 56]
[26 52]
[27 51]
[28 50]
[29 49]
[30 48]
[31 47]
[33 45]
[34 44]
[35 43]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
