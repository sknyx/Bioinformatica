%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jun 26 08:00:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAACAGUAUUGAAAUAGUUGAGGGUUUGUCCUGCUCCAUCCAGAGCAAGGUUAUAGAAAUUUCAGACAAUU\
) } def
/len { sequence length } bind def

/coor [
[23.94964409 362.10256958]
[10.95463181 369.73318481]
[-3.45001841 374.16070557]
[-18.48748016 375.14630127]
[-33.34680557 372.63690186]
[-47.22664642 366.76776123]
[-59.37847900 357.85543823]
[-69.14698029 346.38052368]
[-76.00533295 332.96191406]
[-79.58367920 318.32318115]
[-79.68905640 303.25381470]
[-76.31576538 288.56649780]
[-69.64572906 275.05325317]
[-60.03865051 263.44290161]
[-48.01263428 254.36149597]
[-34.21622467 248.29884338]
[-19.39344788 245.58186340]
[-4.34367228 246.35710144]
[10.12148380 250.58273315]
[17.52811623 237.53889465]
[24.93474960 224.49505615]
[32.34138489 211.45120239]
[39.74801636 198.40736389]
[47.15465164 185.36352539]
[45.94813919 167.98956299]
[61.58568573 158.54223633]
[68.42428589 145.19183350]
[75.26288605 131.84141541]
[82.10148621 118.49100494]
[88.94008636 105.14058685]
[95.19799042 91.50832367]
[100.86360931 77.61945343]
[106.52922821 63.73057938]
[111.89469910 49.72302246]
[116.95754242 35.60326385]
[122.02038574 21.48350334]
[127.08322906 7.36374283]
[120.10984039 -6.81890106]
[125.28656769 -21.75131798]
[139.54214478 -28.57436943]
[154.41899109 -23.24006081]
[161.09094238 -8.91314125]
[155.59965515 5.90648079]
[141.20298767 12.42658615]
[136.14015198 26.54634666]
[131.07730103 40.66610718]
[126.01446533 54.78586578]
[126.74494934 62.37575531]
[120.41809845 69.39620209]
[114.75247955 83.28507233]
[109.08686066 97.17394257]
[110.06069946 102.67214966]
[107.70494080 108.26973724]
[102.29049683 111.97918701]
[95.45189667 125.32960510]
[88.61329651 138.68002319]
[81.77469635 152.03042603]
[74.93609619 165.38084412]
[78.15418243 178.07771301]
[71.94031525 189.14610291]
[60.19849014 192.77015686]
[52.79185867 205.81399536]
[45.38522339 218.85784912]
[37.97859192 231.90168762]
[30.57195854 244.94552612]
[23.16532516 257.98934937]
[34.20568085 268.24642944]
[42.58249664 280.77340698]
[47.84402466 294.89477539]
[49.70652008 309.84896851]
[48.06953430 324.82952881]
[43.02135086 339.02856445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 66]
[20 65]
[21 64]
[22 63]
[23 62]
[24 61]
[26 58]
[27 57]
[28 56]
[29 55]
[30 54]
[31 51]
[32 50]
[33 49]
[34 47]
[35 46]
[36 45]
[37 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
