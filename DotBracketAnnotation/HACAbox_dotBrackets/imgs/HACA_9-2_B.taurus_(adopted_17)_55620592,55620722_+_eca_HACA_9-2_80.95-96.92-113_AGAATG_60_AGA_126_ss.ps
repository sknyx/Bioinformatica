%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed Jun 26 08:00:41 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAUGUUCUGAAAUGGUUUGAGGCCUUGACCCAUGCCUUGCUUGAAGCAUGGUCAUAGACAUUUCAGAUGG\
) } def
/len { sequence length } bind def

/coor [
[53.49205399 419.98919678]
[38.22392273 421.05813599]
[24.21255684 414.89855957]
[14.67767143 402.92590332]
[11.81031132 387.89138794]
[16.26937675 373.24981689]
[27.03020477 362.36575317]
[41.62003708 357.74023438]
[44.18943405 342.96194458]
[46.75883102 328.18362427]
[49.32822800 313.40533447]
[51.89762497 298.62701416]
[54.46702194 283.84872437]
[57.03641891 269.07043457]
[59.60581589 254.29212952]
[62.17521286 239.51382446]
[60.15542603 232.16123962]
[65.18621063 224.16081238]
[68.38902283 209.50672913]
[71.59184265 194.85264587]
[74.79465485 180.19857788]
[69.95332336 166.11273193]
[80.45881653 154.28289795]
[83.66162872 139.62881470]
[86.86444855 124.97473907]
[90.06726074 110.32066345]
[86.00638580 96.94153595]
[95.27866364 86.47652435]
[98.48147583 71.82244873]
[88.33811951 60.22854996]
[86.98241425 45.06229019]
[94.72552490 32.15848160]
[108.41826630 26.35789108]
[111.62107849 11.70381355]
[107.00884247 -3.43018103]
[117.28524780 -14.21186733]
[120.48806000 -28.86594582]
[117.96314240 -45.63082123]
[133.37387085 -52.69804382]
[144.43103027 -39.84597015]
[135.14213562 -25.66313171]
[131.93933105 -11.00905418]
[136.78065491 3.07678342]
[126.27516174 14.90662766]
[123.07234955 29.56070518]
[133.09657288 40.54490662]
[134.75027466 55.50249100]
[127.19091797 68.72026825]
[113.13555145 75.02526093]
[109.93273926 89.67933655]
[113.99361420 103.05846405]
[104.72133636 113.52347565]
[101.51852417 128.17755127]
[98.31571198 142.83163452]
[95.11289215 157.48570251]
[99.72513580 172.61970520]
[89.44873047 183.40138245]
[86.24591827 198.05546570]
[83.04310608 212.70954895]
[79.84028625 227.36361694]
[76.95351410 242.08322144]
[74.38411713 256.86151123]
[71.81472015 271.63983154]
[69.24532318 286.41812134]
[66.67592621 301.19641113]
[64.10652924 315.97473145]
[61.53713226 330.75302124]
[58.96773529 345.53134155]
[56.39833832 360.30963135]
[68.57078552 369.58810425]
[75.02651215 383.46551514]
[74.28204346 398.75289917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 69]
[9 68]
[10 67]
[11 66]
[12 65]
[13 64]
[14 63]
[15 62]
[16 61]
[18 60]
[19 59]
[20 58]
[21 57]
[23 55]
[24 54]
[25 53]
[26 52]
[28 50]
[29 49]
[33 45]
[34 44]
[36 42]
[37 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
